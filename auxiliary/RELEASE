This procedure involves both the Wiki Monkey [client] and [server].

Prechecks:
* [client|server] Ensure that no backward-incompatible configuration
  changes have been made;
* [client|server] Make sure to be on the 'develop' branch, which in
  turn is on the correct commit to be released;
* [client|server] Search for references to the current/previous version number
  and update them
* [client] Update the Node dependencies
* [server] Update the virtual environment dependencies and requirements.txt
  For example use pur https://github.com/alanhamlett/pip-update-requirements
  $ source venv/bin/activate
  $ pip list -o
  $ pur -r requirements.txt
  $ pip install -r requirements.txt
* [client] The following steps assume that the update_check_branch option is
  set to 'develop' and the test User in the wiki is loading the latest script
  from the remote repository

Repeat the following block increasing # until everything works:
* [client] Create and checkout a 'v5.x.x-rc#' branch
  Do not omit the "-rc#" suffix (or similar) in order to prevent CDN services
  from caching the wrong version of the files in case further changes are
  needed
  Contrary to PKGBUILD, npm follows https://semver.org/ and needs the hyphen
  before 'rc'
* [client] Run `./tasks.js build 5.x.x-rc#`
  Do *not* prepend the 'v' here to the version number
* [client] Commit
* [client] Reset the develop branch to the new rc# branch
* [client] Push the develop and rc# branches to the remote repository
* [client] Test that the automated upgrade works
  (possibly delete the 'WikiMonkey-last-update-check' key in the localStorage)
  (possibly stop the [server])
* [client] Test the application on ArchWiki and Wikipedia at least in Firefox
  and Chromium
  Also make sure to check the effects of any changes to the configuration
  object
* [server] Change version numbers to 5.x.xrc#
  Contrary to npm, do not use a hyphen to avoid package-naming
  problems/incompatibilities, for example hyphens aren't allowed in PKGBUILD
  version
  https://packaging.python.org/guides/distributing-packages-using-setuptools/#choosing-a-versioning-scheme
* [server] Generate PyPI package (python setup.py sdist bdist_wheel)
  The [client] scripts must have been regenerated
* [server] Update PKGBUILD's sha256sums
* [server] Copy the local PyPI package to the PKGBUILD folder and generate the
  Pacman package (makepkg)
  Make sure that the venv is *not* activated, or e.g. the console_scripts won't
  be generated
* [server] Install and test the server package

If everything works:
* [client|server] Release the latest version of Python and npm dependencies
  if needed
* [client] Checkout and reset 'develop' to the commit before the working rc#
  branch was built
* [client] Remove the rc# branches, also remotely
  To delete a remote branch: `git push origin :tmpbranch`
   or `git push origin :refs/heads/tmpbranch`
* [client] Run `./tasks.js build 5.x.x`
* [server] Change version numbers to 5.x.x
* [server] Generate PyPI package (python setup.py sdist bdist_wheel)
  The [client] scripts must have been regenerated
* [server] Update PKGBUILD's sha256sums
* [client|server] Commit and tag with the v5.x.x version number
* [client|server] Merge 'develop' into 'master'

Release:
* [client|server] Update the GitHub wiki (also update version numbers in
  examples)
* [client|server] Check that the milestone is closed on GitHub
* [server] Publish on PyPI (twine)
* [server] Publish on AUR (also regenerate .SRCINFO)
* [client|server] Push 'master', 'develop' and the new tag to origin
* [client] Publish on npm
